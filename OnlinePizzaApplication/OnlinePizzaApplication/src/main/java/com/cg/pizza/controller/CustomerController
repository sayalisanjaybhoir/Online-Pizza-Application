package com.cg.pizza.controller;

import java.net.URI;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.cg.pizza.entity.Customer;
import com.cg.pizza.exception.CustomerIdNotFoundException;
import com.cg.pizza.service.CustomerService;


@RestController
@RequestMapping("/customer")
public class CustomerController {
	@Autowired
	private CustomerService customerService;
	@GetMapping
	public ResponseEntity<List<Customer>> getCustomer() {

		List<Customer> customerList = customerService.getCustomer();
	
		ResponseEntity<List<Customer>> response = new ResponseEntity<>(customerList, HttpStatus.NOT_FOUND);

		
		if (!customerList.isEmpty()) {
			response = new ResponseEntity<>(customerList, HttpStatus.OK);
		}

		return response;
	}


	
	@GetMapping(value = "/{customerId}")
	public ResponseEntity<Object> getCustomer1(@PathVariable("customerId") int customerId) {

		Customer customer = customerService.getCustomer(customerId);

		// Creating an error response.
		// ResponseEntity<Object> response =
		// ResponseEntity.status(HttpStatus.BAD_REQUEST)
		// .body("Customer " + customerId + " Not found");

		// If message is not null it sets the customer object in response else by default
		// error
		// will be there in response.
		if (customer == null) {
			// response = new ResponseEntity<>(customer, HttpStatus.OK);
			throw new CustomerIdNotFoundException(customerId + " Not Found");

		}

		return new ResponseEntity<>(customer, HttpStatus.OK);
	}
	@DeleteMapping(value = "/{customerId}")
	public ResponseEntity<Object> deleteCustomer(@PathVariable("customerId") int customerId) {
		// If message is deleted it returns deleted message object else null
		Customer customerPresent = customerService.deleteCustomer(customerId);
		// Creating an success response.
		// ResponseEntity<Object> response = ResponseEntity.status(HttpStatus.OK)
		// .body("Message " + messageId + " deleted");
		// response is set to error if message is null.
		if (customerPresent == null) {
			// response = ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Customer " +
			// messageId + " Not found");
			throw new CustomerIdNotFoundException(customerId + " Not Found");
		}
		// return response;
		return ResponseEntity.status(HttpStatus.OK).body("Message " + customerId + " deleted");
	}


	@PutMapping("/{customerId}")
	public ResponseEntity<Object> updateProduct(@PathVariable("customerId") int customerId,
			@RequestBody Customer customer) {
		customer.setCustomerId(customerId);
		
		Customer updateCustomer = customerService.updateCustomer(customer);
		
		if (updateCustomer == null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Customer " + customerId + " Not found");
		} else {
		
			URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
					.buildAndExpand(customer.getCustomerId()).toUri();
			return ResponseEntity.created(location).build();
		}
	}

	@PostMapping
	public ResponseEntity<Object> addCustomer(@RequestBody Customer customer) {
	
		Customer newCustomer = customerService.insertCustomer(customer);
		
		if (newCustomer == null)
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Inernal server error");
		
		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
				.buildAndExpand(newCustomer.getCustomerId()).toUri();
		return ResponseEntity.created(location).build();
	}
//	@ExceptionHandler(value=CustomerIdNotFoundException.class) // You can Have one more exception objects
//	public ResponseEntity<?> handleCustomerIdNotFoundException(CustomerIdNotFoundException me){
////		return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ex.getCustomer());
//		Map<String, Object> errorCustomer = new LinkedHashMap<>();
//		errorCustomer.put("error", "wrong customer id");
//		errorCustomer.put("timestamp", LocalDateTime.now());
//		errorCustomer.put("details", me.getCustomer());
//
//		return new ResponseEntity<>(errorCustomer, HttpStatus.NOT_FOUND);
//	}
	
	
}

